{"name": "test_handle_modal_02", "status": "broken", "statusDetails": {"message": "minium.framework.exception.PageDestroyed: page destroyed", "trace": "args = ('',), kwargs = {}\nattr = <bound method Page.get_elements of Page(id=15, path=/pages/common/selected_city, query={})>\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        try:\n>           return func(*args, **kwargs)\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\app.py:214: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (Page(id=15, path=/pages/common/selected_city, query={}), '')\nkwargs = {}, start = datetime.datetime(2023, 8, 23, 14, 24, 9, 21064)\nself = Page(id=15, path=/pages/common/selected_city, query={})\nfunc_name = 'Page.get_elements'\n\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        global usage, app_id\n    \n        start = datetime.datetime.now()\n        self = args[0]\n        func_name = f\"{self.__class__.__name__}.{func.__name__}\"\n        try:\n>           result = func(*args, **kwargs)\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\minium_log.py:172: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Page(id=15, path=/pages/common/selected_city, query={}), selector = ''\nmax_timeout = 0, inner_text = None, text_contains = None, value = None\nindex = -1, xpath = None\n\n    def get_elements(\n        self,\n        selector,\n        max_timeout=0,\n        inner_text=None,\n        text_contains=None,\n        value=None,\n        index=-1,\n        xpath=None,\n    ) -> typing.List[ElementType]:\n        \"\"\"\n        find elements in current page, by css selector\n        :param selector: 选择器\n        :param inner_text: inner_text\n        :param value: value\n        :param text_contains: 包含的文字\n        :param max_timeout: 超时时间\n        :param index: index == -1: get所有, index >=0: get index+1个\n        :param xpath: 使用xpath\n        :return:element 对象 list\n        \"\"\"\n        if selector and selector.startswith(\"/\"):\n            # 以/或//开头的认为是xpath\n            xpath = selector\n            selector = None\n        if inner_text is None and value is None and text_contains is None:\n            need_filter = False\n        else:\n            need_filter = True\n        if not need_filter and selector:\n            # 不需要过滤内容，直接返回\n            return self._get_elements_by_css(selector, max_timeout, index=index)\n        elif xpath:\n            # xpath支持text() contains()等条件，不需要额外做过滤\n            return self.get_elements_by_xpath(\n                xpath,\n                max_timeout=max_timeout,\n                inner_text=inner_text,\n                text_contains=text_contains,\n                value=value,\n            )\n    \n        @timeout(max_timeout)\n        def filter_elements():\n            # 需要过滤内容，有返回元素不是终结条件, 需要获取所有元素后再作过滤\n            elements = self._get_elements_by_css(selector, max_timeout, index=-1)\n            els = []\n            for element in elements:\n                if inner_text and element.inner_text != inner_text:\n                    continue\n                if value and element.value() != value:\n                    continue\n                if text_contains and text_contains not in element.inner_text:\n                    continue\n                els.append(element)\n                if len(els) == (index + 1):\n                    return els\n            return els\n    \n>       return filter_elements()\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\page.py:398: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (), kwargs = {}, timeout = 1692771849.0210643, execed = False, r = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        timeout = time.time() + duration\n        execed = False\n        r = None\n        while not (r or timeout < time.time() and execed):\n>           r = func(*args, **kwargs)\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\utils\\utils.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @timeout(max_timeout)\n    def filter_elements():\n        # 需要过滤内容，有返回元素不是终结条件, 需要获取所有元素后再作过滤\n>       elements = self._get_elements_by_css(selector, max_timeout, index=-1)\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\page.py:384: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Page(id=15, path=/pages/common/selected_city, query={}), selector = ''\nmax_timeout = 0, index = -1\n\n    def _get_elements_by_css(\n        self, selector: str, max_timeout=0, index=-1\n    ) -> typing.List[ElementType]:\n        \"\"\"\n        1. 现存自定义组件中的class会自动加前缀，但不包括slot占位的元素\n        2. slot元素的class命名规则\n        2.1 <page><test><view class=\"这个class不会加前缀\"></view></test></page>\n        2.2 <custom><test><view class=\"这个class会加上custom组件对应的前缀\"></view></test></custom>\n        3. 自定义组件中通过id获取元素失败\n        \"\"\"\n    \n        @timeout(max_timeout)\n        def search_elements(_selector: list or tuple):\n            return self.__search_child(\n                _selector[0:], index=index\n            )  # __search_child回pop元素，第一次search失败后重试会有问题，copy一份\n    \n        self.logger.info(\"try to get elements: %s\" % selector)\n        _selector_list = selector.split(\">>>\")\n        _selector_list.reverse()  # 新增处理【>>>】穿透自定义组件逻辑\n>       els = search_elements(_selector_list)\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\page.py:560: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = ([''],), kwargs = {}, timeout = 1692771849.0215645, execed = False\nr = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        timeout = time.time() + duration\n        execed = False\n        r = None\n        while not (r or timeout < time.time() and execed):\n>           r = func(*args, **kwargs)\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\utils\\utils.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n_selector = ['']\n\n    @timeout(max_timeout)\n    def search_elements(_selector: list or tuple):\n>       return self.__search_child(\n            _selector[0:], index=index\n        )  # __search_child回pop元素，第一次search失败后重试会有问题，copy一份\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\page.py:553: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Page(id=15, path=/pages/common/selected_city, query={})\nselector_list = [], parent = None, index = -1\n\n    def __search_child(\n        self, selector_list: list, parent: ElementType = None, index=-1\n    ) -> typing.List[ElementType]:\n        # index == -1: get所有, index >=0: get index+1个\n        if len(selector_list) == 0:\n            return []\n        _selector = selector_list.pop()\n        should_be_custom_element = bool(\n            len(selector_list)\n        )  # 出了最后一层selector，都需要是自定义组件，不然不能往下走\n        if parent:\n            els = parent.get_elements(\n                _selector, max_timeout=0\n            )  # 调用element.get_elements方法，要求立刻返回，不然会影响效率\n        else:\n>           els = self.__get_elements(_selector)\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\page.py:517: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (Page(id=15, path=/pages/common/selected_city, query={}), '')\nkwargs = {}, _cnt = 1, e = PageDestroyed('page destroyed')\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        _cnt = 0\n        while _cnt < cnt:\n            try:\n                _cnt += 1\n>               ret = func(*args, **kwargs)\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\utils\\utils.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Page(id=15, path=/pages/common/selected_city, query={}), selector = ''\nindex = -1\n\n    def __get_elements(self, selector: str, index=-1):\n        elements = []\n>       ret = self._send(\"Page.getElements\", {\"selector\": selector})\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\page.py:495: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Page(id=15, path=/pages/common/selected_city, query={})\nmethod = 'Page.getElements', params = {'pageId': 15, 'selector': ''}\nsync = True\n\n    def _send(self, method, params=None, sync=True):\n        if params is None:\n            params = {}\n        params[\"pageId\"] = self.page_id\n        # self.logger.debug(f\"method {method}, params: {params}\")\n        return (\n>           self.connection.send(method, params)\n            if sync\n            else self.connection.send_async(method, params)\n        )\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\page.py:488: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <minium.miniprogram.base_driver.connection.Connection object at 0x0000021E7431FCA0>\nmethod = 'Page.getElements', params = {'pageId': 15, 'selector': ''}\nmax_timeout = None\n\n    def send(self, method: str or Command, params=None, max_timeout=None):\n        # 同步发送消息，函数会阻塞\n        cmd: Command = self._gen_command(method, params, max_timeout)\n        with cmd:\n            self._sync_wait_map[cmd.id] = None  # 该ID未有返回message\n            self._safely_send(cmd)\n>           return self._receive_response(cmd)\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\connection.py:447: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <minium.miniprogram.base_driver.connection.Connection object at 0x0000021E7431FCA0>\ncmd = <minium.miniprogram.base_driver.connection.Command object at 0x0000021E7439B370>\n\n    def _receive_response(self, cmd: Command):\n        # 等待接收到message的通知\n        while cmd.max_timeout > 0:\n            self._wait(cmd)\n    \n            if (\n                cmd.id in self._sync_wait_map\n                and self._sync_wait_map[cmd.id] is not None\n            ):  # 获取到了数据\n                response = self._sync_wait_map.pop(cmd.id)\n                if isinstance(response, MiniAppError):\n>                   raise response\nE                   minium.framework.exception.PageDestroyed: page destroyed\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\connection.py:473: PageDestroyed\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_login.TestShouye_1 testMethod=test_handle_modal_02>\n\n    def test_handle_modal_02(self):\n        callback = Callback()  # 监听回调, 阻塞当前主线程\n    \n        # 监听showModal回调, 确认由弹窗弹出\n        self.app.hook_wx_method(\"showModal\", callback=callback.callback)\n        self.page.get_element('text=\"安徽省-安庆市!\"').tap()  # 触发弹窗\n        time.sleep(2)\n        self.native.handle_modal(\"确定\")  # 点击弹窗的\"确定\"按钮\n        # 确认选择\n>       elements = self.page.get_elements(\n            '')\n\ntests\\test_login.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\app.py:217: in wrapper\n    return attr(*args, **kwargs)\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\minium_log.py:172: in wrapper\n    result = func(*args, **kwargs)\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\page.py:398: in get_elements\n    return filter_elements()\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\utils\\utils.py:56: in wrapper\n    r = func(*args, **kwargs)\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\page.py:384: in filter_elements\n    elements = self._get_elements_by_css(selector, max_timeout, index=-1)\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\page.py:560: in _get_elements_by_css\n    els = search_elements(_selector_list)\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\utils\\utils.py:56: in wrapper\n    r = func(*args, **kwargs)\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\page.py:553: in search_elements\n    return self.__search_child(\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\page.py:517: in __search_child\n    els = self.__get_elements(_selector)\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\utils\\utils.py:82: in wrapper\n    ret = func(*args, **kwargs)\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\page.py:495: in __get_elements\n    ret = self._send(\"Page.getElements\", {\"selector\": selector})\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\page.py:488: in _send\n    self.connection.send(method, params)\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\connection.py:447: in send\n    return self._receive_response(cmd)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <minium.miniprogram.base_driver.connection.Connection object at 0x0000021E7431FCA0>\ncmd = <minium.miniprogram.base_driver.connection.Command object at 0x0000021E7439A110>\n\n    def _receive_response(self, cmd: Command):\n        # 等待接收到message的通知\n        while cmd.max_timeout > 0:\n            self._wait(cmd)\n    \n            if (\n                cmd.id in self._sync_wait_map\n                and self._sync_wait_map[cmd.id] is not None\n            ):  # 获取到了数据\n                response = self._sync_wait_map.pop(cmd.id)\n                if isinstance(response, MiniAppError):\n>                   raise response\nE                   minium.framework.exception.PageDestroyed: page destroyed\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\connection.py:473: PageDestroyed"}, "start": 1692771846796, "stop": 1692771849790, "uuid": "1ec762b7-ce5c-4aa5-bc24-08bf12e667a2", "historyId": "7abd7a93bab5bfa766ecb9cf8ce4c3d4", "testCaseId": "7abd7a93bab5bfa766ecb9cf8ce4c3d4", "fullName": "tests.test_login.TestShouye_1#test_handle_modal_02", "labels": [{"name": "suite", "value": "首页"}, {"name": "feature", "value": "粮油副食"}, {"name": "parentSuite", "value": "tests"}, {"name": "subSuite", "value": "TestShouye_1"}, {"name": "host", "value": "LAPTOP-7PGH1LS0"}, {"name": "thread", "value": "1340-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}