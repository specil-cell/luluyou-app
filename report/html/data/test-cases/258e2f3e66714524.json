{"uid":"258e2f3e66714524","name":"test_handle_modal_02","fullName":"tests.test_login.TestShouYe_1#test_handle_modal_02","historyId":"36295b0648988bd8e9c0d491199a3e21","time":{"start":1692782859428,"stop":1692782862482,"duration":3054},"status":"broken","statusMessage":"minium.framework.exception.PageDestroyed: page destroyed","statusTrace":"args = ('//*[@id=\"nav-item-notice\"]/navigator[1]/view',), kwargs = {}\nattr = <bound method Page.get_elements of Page(id=180, path=/pages/common/selected_city, query={})>\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        try:\n>           return func(*args, **kwargs)\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\app.py:214: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (Page(id=180, path=/pages/common/selected_city, query={}), '//*[@id=\"nav-item-notice\"]/navigator[1]/view')\nkwargs = {}, start = datetime.datetime(2023, 8, 23, 17, 27, 41, 643312)\nself = Page(id=180, path=/pages/common/selected_city, query={})\nfunc_name = 'Page.get_elements'\n\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        global usage, app_id\n    \n        start = datetime.datetime.now()\n        self = args[0]\n        func_name = f\"{self.__class__.__name__}.{func.__name__}\"\n        try:\n>           result = func(*args, **kwargs)\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\minium_log.py:172: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Page(id=180, path=/pages/common/selected_city, query={}), selector = None\nmax_timeout = 0, inner_text = None, text_contains = None, value = None\nindex = -1, xpath = '//*[@id=\"nav-item-notice\"]/navigator[1]/view'\n\n    def get_elements(\n        self,\n        selector,\n        max_timeout=0,\n        inner_text=None,\n        text_contains=None,\n        value=None,\n        index=-1,\n        xpath=None,\n    ) -> typing.List[ElementType]:\n        \"\"\"\n        find elements in current page, by css selector\n        :param selector: 选择器\n        :param inner_text: inner_text\n        :param value: value\n        :param text_contains: 包含的文字\n        :param max_timeout: 超时时间\n        :param index: index == -1: get所有, index >=0: get index+1个\n        :param xpath: 使用xpath\n        :return:element 对象 list\n        \"\"\"\n        if selector and selector.startswith(\"/\"):\n            # 以/或//开头的认为是xpath\n            xpath = selector\n            selector = None\n        if inner_text is None and value is None and text_contains is None:\n            need_filter = False\n        else:\n            need_filter = True\n        if not need_filter and selector:\n            # 不需要过滤内容，直接返回\n            return self._get_elements_by_css(selector, max_timeout, index=index)\n        elif xpath:\n            # xpath支持text() contains()等条件，不需要额外做过滤\n>           return self.get_elements_by_xpath(\n                xpath,\n                max_timeout=max_timeout,\n                inner_text=inner_text,\n                text_contains=text_contains,\n                value=value,\n            )\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\page.py:373: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (Page(id=180, path=/pages/common/selected_city, query={}), '//*[@id=\"nav-item-notice\"]/navigator[1]/view')\nkwargs = {'inner_text': None, 'max_timeout': 0, 'text_contains': None, 'value': None}\nstart = datetime.datetime(2023, 8, 23, 17, 27, 41, 643312)\nself = Page(id=180, path=/pages/common/selected_city, query={})\nfunc_name = 'Page.get_elements_by_xpath'\n\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        global usage, app_id\n    \n        start = datetime.datetime.now()\n        self = args[0]\n        func_name = f\"{self.__class__.__name__}.{func.__name__}\"\n        try:\n>           result = func(*args, **kwargs)\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\minium_log.py:172: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Page(id=180, path=/pages/common/selected_city, query={})\nxpath = '//*[@id=\"nav-item-notice\"]/navigator[1]/view', max_timeout = 0\ninner_text = None, value = None, text_contains = None, index = -1\n\n    def get_elements_by_xpath(\n        self,\n        xpath,\n        max_timeout=10,\n        inner_text=None,\n        value=None,\n        text_contains=None,\n        index=-1,\n    ) -> ElementType:\n        \"\"\"\n        根据xpath查找元素\n        :param xpath: xpath\n        :param max_timeout: 超时时间\n        :param inner_text: inner_text\n        :param value: value\n        :param text_contains: 包含的文字\n        \"\"\"\n        if inner_text is not None:\n            xpath += '[text()=\"%s\"]' % inner_text\n        elif text_contains is not None:\n            xpath += '[contains(text(), \"%s\")]' % text_contains\n        elif value is not None:\n            xpath += '[@value=\"%s\"]' % value\n    \n        @timeout(max_timeout)\n        def search_elements():\n            return self._get_elements_by_xpath(xpath, index=index)\n    \n>       return search_elements()\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\page.py:441: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (), kwargs = {}, timeout = 1692782861.643313, execed = False, r = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        timeout = time.time() + duration\n        execed = False\n        r = None\n        while not (r or timeout < time.time() and execed):\n>           r = func(*args, **kwargs)\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\utils\\utils.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @timeout(max_timeout)\n    def search_elements():\n>       return self._get_elements_by_xpath(xpath, index=index)\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\page.py:439: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (Page(id=180, path=/pages/common/selected_city, query={}), '//*[@id=\"nav-item-notice\"]/navigator[1]/view')\nkwargs = {'index': -1}, _cnt = 1, e = PageDestroyed('page destroyed')\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        _cnt = 0\n        while _cnt < cnt:\n            try:\n                _cnt += 1\n>               ret = func(*args, **kwargs)\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\utils\\utils.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Page(id=180, path=/pages/common/selected_city, query={})\nxpath = '//*[@id=\"nav-item-notice\"]/navigator[1]/view', index = -1\n\n    def _get_elements_by_xpath(self, xpath: str, index=-1) -> typing.List[ElementType]:\n        \"\"\"\n        description: 通过xpath获取元素\n        param {*} self\n        param {str} xpath\n        return {*} List[ElementType]\n        \"\"\"\n        xpath = (\n            xpath[5:] if xpath.find(\"/page/\") == 0 else xpath\n        )  # xpath不能以/page/开头（不存在的根节点）\n        if not self._can_i_use(\"Page.getElementsByXpath\"):\n            el = self._get_element_by_xpath(xpath)  # 降级使用Page.getElementByXpath\n            return [el] if el else []\n        try:\n>           ret = self._send(\"Page.getElementsByXpath\", {\"selector\": xpath})\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\page.py:658: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Page(id=180, path=/pages/common/selected_city, query={})\nmethod = 'Page.getElementsByXpath'\nparams = {'pageId': 180, 'selector': '//*[@id=\"nav-item-notice\"]/navigator[1]/view'}\nsync = True\n\n    def _send(self, method, params=None, sync=True):\n        if params is None:\n            params = {}\n        params[\"pageId\"] = self.page_id\n        # self.logger.debug(f\"method {method}, params: {params}\")\n        return (\n>           self.connection.send(method, params)\n            if sync\n            else self.connection.send_async(method, params)\n        )\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\page.py:488: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <minium.miniprogram.base_driver.connection.Connection object at 0x00000226B8BACD90>\nmethod = 'Page.getElementsByXpath'\nparams = {'pageId': 180, 'selector': '//*[@id=\"nav-item-notice\"]/navigator[1]/view'}\nmax_timeout = None\n\n    def send(self, method: str or Command, params=None, max_timeout=None):\n        # 同步发送消息，函数会阻塞\n        cmd: Command = self._gen_command(method, params, max_timeout)\n        with cmd:\n            self._sync_wait_map[cmd.id] = None  # 该ID未有返回message\n            self._safely_send(cmd)\n>           return self._receive_response(cmd)\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\connection.py:447: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <minium.miniprogram.base_driver.connection.Connection object at 0x00000226B8BACD90>\ncmd = <minium.miniprogram.base_driver.connection.Command object at 0x00000226B8BFE950>\n\n    def _receive_response(self, cmd: Command):\n        # 等待接收到message的通知\n        while cmd.max_timeout > 0:\n            self._wait(cmd)\n    \n            if (\n                cmd.id in self._sync_wait_map\n                and self._sync_wait_map[cmd.id] is not None\n            ):  # 获取到了数据\n                response = self._sync_wait_map.pop(cmd.id)\n                if isinstance(response, MiniAppError):\n>                   raise response\nE                   minium.framework.exception.PageDestroyed: page destroyed\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\connection.py:473: PageDestroyed\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_login.TestShouYe_1 testMethod=test_handle_modal_02>\n\n    def test_handle_modal_02(self):\n        callback = Callback()  # 监听回调, 阻塞当前主线程\n    \n        # 监听showModal回调, 确认由弹窗弹出\n        self.app.hook_wx_method(\"showModal\", callback=callback.callback)\n        self.page.get_element('text=\"安徽省-安庆市!\"').tap()  # 触发弹窗\n        time.sleep(2)\n        self.native.handle_modal(\"确定\")  # 点击弹窗的\"确定\"按钮\n    \n    #     # 搜索\n    #     time.sleep(3)\n    #     elements = self.page.get_elements(\n    #         '/page/view/biz-index-head/view/navigator')\n    #     for element in elements:\n    #         element.click()\n    #     time.sleep(3)\n    #     #     # 选择景点进行搜索\n    #     #     time.sleep(3)\n    #     #     elements = self.page.get_elements(\n    #     #         '/page/view/view[1]/picker/view')\n    #     #     for element in elements:\n    #     #         element.click()\n    #     #\n    #     # def test_handle_modal_03(self):\n    #     #     callback = Callback()  # 监听回调, 阻塞当前主线程\n    #     #\n    #     #     # 监听showModal回调, 确认由弹窗弹出\n    #     #     self.app.hook_wx_method(\"showModal\", callback=callback.callback)\n    #     #\n    #     #     self.page.get_element('text=\"景点\"').tap()  # 触发弹窗\n    #     #     pyautogui.scroll(2)\n    #     #     time.sleep(2)\n    #     #     self.native.handle_modal(\"确定\")  # 点击弹窗的\"确定\"按钮\n    #     #\n    #     #     time.sleep(3)\n    #     #     elements = self.page.get_elements(\n    #     #         '/page/view/biz-index-head/view/navigator')\n    #     #     for element in elements:\n    #     #         element.send_keys('武侯祠')\n    #     #     # 返回首页\n    #     # 武侯祠(历史记录)\n    #     elements = self.page.get_elements(\n    #         '/page/view/view[2]/view/view[2]/view')\n    #     for element in elements:\n    #         element.click()\n    #     # 武侯祠(确定选择)\n    #     elements = self.page.get_elements(\n    #         '/page/view/view[2]/list/view/view/navigator')\n    #     for element in elements:\n    #         element.click()\n    #\n    #     # 立即预约\n    #     elements = self.page.get_elements(\n    #         '/page/view/view[5]/view/button')\n    #     for element in elements:\n    #         element.click()\n    #     time.sleep(3)\n    #     # 确认预约\n    #     elements = self.page.get_elements(\n    #         '/page/view/view[5]/button')\n    #     for element in elements:\n    #         element.click()\n    #     time.sleep(8)\n    #     # 关闭弹窗\n    #     elements = self.page.get_elements(\n    #         '/page/view/ml-popup-modal/uni-popup/view/view/uni-transition[2]/view/view/view[1]/view[1]/text')\n    #     for element in elements:\n    #         element.click()\n    #     # 返回上一页(返回至景点页面)\n    #     elements = self.page.get_elements(\n    #         '/page/view/ml-title/view/view/view/view[1]/text')\n    #     for element in elements:\n    #         element.click()\n    #     # 返回上一页(返回至搜索页面)\n    #     elements = self.page.get_elements(\n    #         '/page/view/ml-title/view/view/view/view[1]')\n    #     for element in elements:\n    #         element.click()\n    #     # 返回首页(页面路径跳转)\n    #\n    # def setUp_03(self):\n    #     if self.page.path != \"pages/index/index\":\n    #         self.app.navigate_to(\"pages/index/index\")\n    #     time.sleep(3)\n    \n        # 购买年卡\n>       elements = self.page.get_elements(\n            '//*[@id=\"nav-item-notice\"]/navigator[1]/view')\n\ntests\\test_login.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\app.py:217: in wrapper\n    return attr(*args, **kwargs)\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\minium_log.py:172: in wrapper\n    result = func(*args, **kwargs)\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\page.py:373: in get_elements\n    return self.get_elements_by_xpath(\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\minium_log.py:172: in wrapper\n    result = func(*args, **kwargs)\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\page.py:441: in get_elements_by_xpath\n    return search_elements()\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\utils\\utils.py:56: in wrapper\n    r = func(*args, **kwargs)\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\page.py:439: in search_elements\n    return self._get_elements_by_xpath(xpath, index=index)\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\utils\\utils.py:82: in wrapper\n    ret = func(*args, **kwargs)\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\page.py:658: in _get_elements_by_xpath\n    ret = self._send(\"Page.getElementsByXpath\", {\"selector\": xpath})\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\page.py:488: in _send\n    self.connection.send(method, params)\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\connection.py:447: in send\n    return self._receive_response(cmd)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <minium.miniprogram.base_driver.connection.Connection object at 0x00000226B8BACD90>\ncmd = <minium.miniprogram.base_driver.connection.Command object at 0x00000226B8BFCF70>\n\n    def _receive_response(self, cmd: Command):\n        # 等待接收到message的通知\n        while cmd.max_timeout > 0:\n            self._wait(cmd)\n    \n            if (\n                cmd.id in self._sync_wait_map\n                and self._sync_wait_map[cmd.id] is not None\n            ):  # 获取到了数据\n                response = self._sync_wait_map.pop(cmd.id)\n                if isinstance(response, MiniAppError):\n>                   raise response\nE                   minium.framework.exception.PageDestroyed: page destroyed\n\nD:\\software\\python-3.10.10\\lib\\site-packages\\minium\\miniprogram\\base_driver\\connection.py:473: PageDestroyed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestShouYe_1","time":{"start":1692782842440,"stop":1692782844432,"duration":1992},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"afterStages":[{"name":"_unittest_setUpClass_fixture_TestShouYe_1::0","time":{"start":1692782867706,"stop":1692782867706,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"suite","value":"首页"},{"name":"feature","value":"粮油副食"},{"name":"parentSuite","value":"tests"},{"name":"subSuite","value":"TestShouYe_1"},{"name":"host","value":"LAPTOP-7PGH1LS0"},{"name":"thread","value":"22900-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"258e2f3e66714524.json","parameterValues":[]}